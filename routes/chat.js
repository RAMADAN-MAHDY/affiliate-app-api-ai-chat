import express from "express";
import OpenAI from "openai";
import dotenv from "dotenv";
import UserRequest from "../models/UserRequest.js";
import { generateToken, verifyToken } from "../utils/jwt.js";
import crypto from "crypto";

dotenv.config();

const router = express.Router();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

router.post("/", async (req, res) => {
  const { message } = req.body;
  const authHeader = req.headers.authorization;

  if (!message) {
    return res.status(400).json({ error: "ุงูุฑุณุงูุฉ ูุทููุจุฉ" });
  }

  let sessionId;
  let token;

  // โ ุงูุชุญูู ูู ูุฌูุฏ ุงูุชููู ูุชุญูููู
  if (authHeader && authHeader.startsWith("Bearer ")) {
    const incomingToken = authHeader.split(" ")[1];
    try {
      const decoded = verifyToken(incomingToken);
      sessionId = decoded.sessionId;
      token = incomingToken;
    } catch (err) {
      return res.status(401).json({ error: "ุชููู ุบูุฑ ุตุงูุญ" });
    }
  } else {
    // โ ูู ูููุด ุชูููุ ููููุฏ ูุงุญุฏ ุฌุฏูุฏ
    sessionId = crypto.randomUUID();
    token = generateToken({ sessionId });
  }

  try {
    // ุงูุจุญุซ ุนู ุงูุฌูุณุฉ ุจุงูุชููู (ุงููู ููู sessionId)
    let userSession = await UserRequest.findOne({ sessionId });

    if (!userSession) {
      userSession = await UserRequest.create({
        sessionId,
        chatHistory: [
          {
            role: "system",
            content: `
ุฃูุช ูุณุงุนุฏ ุฐูู ูุฎุฏูุงุช ุชูุธูู ุงูููุงุฒู ูุงูููุงุชุจุ ูุฏูู ุงููุนูููุงุช ุงูุชุงููุฉ:

- ุฎุฏูุงุช ุงูุชูุธูู:
1. ุชูุธูู ุชููููุงุช
2. ุชูุธูู ุบุฑู
3.ุชูุธูู ุฑูููุงุช ูุณุฌุงุฏ
4.ูุฌุงูุณ
5.ูู ุฎุฏูุฉ ูุธุงูู ุนุงูุฉ 

- ุฃููุงุช ุงูุญุฌุฒ ุงููุชุงุญุฉ: ูู 9 ุตุจุงุญูุง ุฅูู 12 ุตุจุงุญูุง

- ุงูููุงุทู ุงููุชุงุญุฉ: ุงูุฎุฑุฌุ ุงูุฑูุงุถ

๐ ูุฏูู ูู:
- ูุณุงุนุฏุฉ ุงูุนููู ูู ุงุฎุชูุงุฑ ููุน ุงูุฎุฏูุฉ
- ุชุญุฏูุฏ ุงูุชุงุฑูุฎ ูุงูููุช
- ูุนุฑูุฉ ุงุณูู
- ูุนุฑูุฉ ุฑูู ุฌูุงูู ููุชูุงุตู

โ ูุง ุชุทูุจ ูู ุงูุนููู ุงูุถุบุท ุนูู ุฒุฑ "ุชู" ุฅูุง ุฅุฐุง ูุงู ูุชุจ:
- ููุน ุงูุฎุฏูุฉ
- ุงููููุน
- ุงูุชุงุฑูุฎ
- ุงูููุช
- ุงุณูู
- ุฑูู ุงูุฌูุงู

๐ ูู ุงูุนููู ูุง ูุชุจ ุฑูู ุฌูุงููุ ูุง ุชุทูุจ ููู ุชุฃููุฏ ุงูุญุฌุฒุ ูุจููุบู ุฅู ูุงุฒู ููุชุจ ุฑูู ุงูุฌูุงู ุนูุดุงู ูููู.

๐ฌ ูู ูุฏูุฏ ููุงุถุญุ ูุฑุฏ ุจุงูููุฌุฉ ุงูุณุนูุฏูุฉ ุฏุงุฆููุงุ ูุงุณุชุฎุฏู ุฅูููุฌูุงุช ููุงุณุจุฉ ูู ุฑุฏูุฏู.

-  ุงุฐ ุทูุจ ุงู ุดู ูุด ููุฌูุฏ ููุง ูููู ูุชุตู ุนูู ุงูุฑูู ุฏู 0562790402

ุงุฐุง ุชู ุชุงููุฏ ุงูุญุฌุฒ ูุงุณุชููุช ูู ุงูุจูุงูุงุช ููู ูุถุบุท ุนูู ุฒุฑ "ุชู ุงูุงุชูุงู" ุนุดุงู ูุชู ุงูุญุฌุฒ

๐ก๐ ุงูุชุจ ุงูุฑุฏ ุจุตูุบุฉ Markdown ููุทุ ููุง ุชุณุชุฎุฏู ุฃู ุนูุงูุงุช ุชุฑููู ุบูุฑ Markdown. 
- ุงุฌุนู ูู ุณุทุฑ ูุญุชูู ุนูู ุณุทุฑ ุฌุฏูุฏ (line break) 
- ูุง ุชุฏูุฌ ุงูููุงุท ูููุง ูู ุณุทุฑ ูุงุญุฏ 
- ุงุฌุนู ูู ููุฑุฉ ูุงุถุญุฉ ูููุณูุฉ ุจุดูู ุณูู ุงููุฑุงุกุฉ. 
`.trim(),
          },
        ],
      });

      // โ ุฃูู ูุฑุฉ ููุท: ุงุฑุฌุน ุฑุฏ ุชุฑุญูุจู ุซุงุจุช ุจุฏูู ุงุณุชุฏุนุงุก GPT
      return res.json({
        reply: `ููุง ููู! ๐  
ูุด ููุน ุงูุฎุฏูุฉ ุงููู ุชุจุบุงูุงุ  
ุนูุฏู ุฎุฏูุงุช ุชูุธูู ููููููุงุช  
ุงูุบุฑู  
ุงูุฑูููุงุช  
ุงูุณุฌุงุฏ  
ูุงููุฌุงูุณ  

๐ ุงูุฃููุงุช: ูู 9 ุตุจุงุญูุง ุฅูู 12 ูุณุงุกู  
๐ ุงูููุงุทู: ุงูุฑูุงุถ ูุงูุฎุฑุฌ  

๐ฌ ุงูุชุจ ูู ููุน ุงูุฎุฏูุฉ ุฃู ุงุณุชูุณุงุฑูุ ูุฃูุง ุญุงุถุฑ ุฃุฎุฏูู ๐`,
        token,
      });
    }

    // โ ุจุงูู ุงูุฌูุณุงุช: ูููู ุงูุชูุงุนู ูุน GPT
    userSession.chatHistory.push({ role: "user", content: message });

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: userSession.chatHistory.slice(-20),
      max_tokens: 500,
      temperature: 0.7,
    });

    const reply = completion.choices[0]?.message?.content;

    if (!reply) {
      return res.status(500).json({ error: "ูุง ูุฏุฑูุง ูุฑุฌุน ุฑุฏ ูู ุงููุณุงุนุฏ" });
    }

    userSession.chatHistory.push({ role: "assistant", content: reply });
    await userSession.save();

    res.json({ reply, token });
  } catch (error) {
    console.error("โ ุฎุทุฃ ูู ุงุณุชุฏุนุงุก GPT:", error);
    res.status(500).json({ error: "ุญุฏุซ ุฎุทุฃ ุฏุงุฎูู" });
  }
});

export default router;
